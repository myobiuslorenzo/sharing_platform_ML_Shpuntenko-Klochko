{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":" heuristic","provenance":[{"file_id":"1XUlY8T3TuQMiyyrdYLWbZP85VDVTwnS5","timestamp":1617747098009},{"file_id":"1m1iID9GnyTkw_nGpDvoJiUBIfB3XCSao","timestamp":1617635558605},{"file_id":"1bAk9JA78ABk29foB-2lvhV4l3tB3bXTu","timestamp":1617618150082}],"collapsed_sections":["xP6-BydFXag7"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"xP6-BydFXag7"},"source":["#### Imports\n"]},{"cell_type":"code","metadata":{"id":"iLJo_bAQUH7p"},"source":["import numpy as np \n","import pandas as pd\n","\n","import os"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gIBzPbAfWVUj","executionInfo":{"status":"ok","timestamp":1621288181946,"user_tz":-180,"elapsed":3713,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"35cf307b-3c95-4c8a-ea49-854f6adbcc8e"},"source":["!pip install pymystem3"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pymystem3 in /usr/local/lib/python3.7/dist-packages (0.2.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from pymystem3) (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->pymystem3) (2020.12.5)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->pymystem3) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->pymystem3) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->pymystem3) (1.24.3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2GH0W4aEWWhr","executionInfo":{"status":"ok","timestamp":1621288183253,"user_tz":-180,"elapsed":5014,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"ca9038ec-9a52-4fe2-f4ce-7ec5dcca545f"},"source":["import nltk\n","from nltk.corpus import stopwords\n","from pymystem3 import Mystem\n","from string import punctuation\n","\n","from sklearn.svm import LinearSVC\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import normalize\n","from sklearn.metrics import accuracy_score\n","from sklearn.pipeline import make_pipeline\n","from sklearn.externals import joblib\n","\n","from scipy.sparse import hstack\n","from scipy.sparse import csr_matrix\n","\n","nltk.download(\"stopwords\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"yIGbj0BNXTov"},"source":["#### Загрузка данных"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H6yKR6QaZMBg","executionInfo":{"status":"ok","timestamp":1621288204310,"user_tz":-180,"elapsed":24062,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"63c01a76-aad7-4316-cce8-866ec23c38c0"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"S0rRVJneZbcs"},"source":[" path = \"/content/drive/MyDrive/Inprac_data/raw_data\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ng5PIlwEXL3I","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"error","timestamp":1621276190718,"user_tz":-180,"elapsed":27806,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"0f56f939-b6bd-4cf0-f897-7524b0e4094a"},"source":["pd_categorized_data = pd.read_csv(path + \"/train.csv\")\n","target = pd_categorized_data.category_id.copy()\n","del pd_categorized_data['category_id']\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-0f26238b3d17>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpd_categorized_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"/train.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd_categorized_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcategory_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mdel\u001b[0m \u001b[0mpd_categorized_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'category_id'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    686\u001b[0m     )\n\u001b[1;32m    687\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 688\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 454\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    946\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    947\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 948\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1178\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1180\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1181\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   2008\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2009\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2010\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2011\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2012\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/Inprac_data/raw_data/train.csv'"]}]},{"cell_type":"markdown","metadata":{"id":"lbB6il-KclvF"},"source":["#### TF-IDF"]},{"cell_type":"code","metadata":{"id":"YGq1vng4aMOL"},"source":["stop_words = stopwords.words(\"russian\")\n","\n","def tokenize(text):\n","    \n","    if isinstance(text, np.ndarray):\n","      # np array\n","      \n","      str_text = ''\n","      for s in text:\n","        str_text = str_text + s\n","      text = str_text\n","    \n","\n","    tokens = [token for token in text.split() if token not in stop_words and token != \" \" \\\n","                      and token.strip() not in punctuation]\n","    return tokens\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"St8xGIDfazXV"},"source":["path_to_prepr_data = \"/content/drive/MyDrive/Inprac_data\"\n","prepr_queries_data = pd.read_csv(path_to_prepr_data + \"/prepr_queries.csv\", header = None)\n","prepr_descriptions_data = pd.read_csv(path_to_prepr_data + \"/prepr_descriptions.csv\", header = None,\\\n","                                      sep ='<<', engine = 'python')\n","prepr_queries_data['descr'] = prepr_descriptions_data[0]\n","prepr_queries_data['query'] = prepr_queries_data[0]\n","prepr_queries_data['category_id'] = target"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Jl2zjFy0o2YD"},"source":["#### Train"]},{"cell_type":"code","metadata":{"id":"VYBsxdA3Qkmw"},"source":["X_train, X_valid, y_train, y_valid = train_test_split(\n","    prepr_queries_data[['query', 'descr']].values, target, test_size=0.2, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8PlYyJPZl9fD"},"source":["#### Pipeline\n"]},{"cell_type":"code","metadata":{"id":"O55lJGrJmCYG"},"source":["\n","\n","vectorizer = TfidfVectorizer(tokenizer=tokenize, lowercase=False)\n","model = LinearSVC()\n","pipeline = make_pipeline(vectorizer, model)\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9LsYJJuUmDaP"},"source":["#### FIT\n"]},{"cell_type":"code","metadata":{"id":"MnuuXELsQufn"},"source":["pipeline.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"It7ddwLBhyqD"},"source":["prediction = pipeline.predict(X_valid)\n","acc = accuracy_score(prediction, y_valid)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MTnHs7JaiFpK"},"source":["print(acc)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s8_8zn5o0pA6"},"source":["\n","joblib.dump(pipeline, path + '/pipeline.pkl', compress=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FD3EXcRtDRn5"},"source":["#### эвристика"]},{"cell_type":"code","metadata":{"id":"MPBHFaxDK9yE","colab":{"base_uri":"https://localhost:8080/","height":180},"executionInfo":{"status":"error","timestamp":1621276204300,"user_tz":-180,"elapsed":1278,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"976372cb-8d92-44ec-98f9-21455c0b20c1"},"source":["with open(path + '/pipeline.pkl','rb') as g:\n","  class_model = joblib.load(g)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-eb83e0450a3b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'/pipeline.pkl'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mg\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m   \u001b[0mclass_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjoblib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/Inprac_data/raw_data/pipeline.pkl'"]}]},{"cell_type":"code","metadata":{"id":"z-LMdncnEnTG"},"source":["def get_class(resp):\n","  return resp.category_id\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QDiyE53fJmIl"},"source":["### \n","# path_to_category = \n","# def get_class(resp):\n","#   pd_categorized_data = pd.read_csv(path_to_category)\n","#   classes = pd_categorized_data.category_id.copy()\n","\n","#   return classes.iloc[resp.index]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZHsJGu0cqq2v"},"source":["def ev_heurist(query, responses):\n","  res_size = responses.shape[0] # количество доков\n","  grades = np.arange(1, res_size + 1)[::-1]\n","  \n","  max_grade = res_size * (res_size + 1) / 2\n","  q_class_pred = class_model.predict(query)\n","\n","  resp_class = get_class(responses) # get class method\n","\n","  is_eq = (resp_class == q_class_pred * np.ones(res_size))\n","\n","\n","  score = grades[is_eq].sum() / max_grade\n","\n","  return min(1, score * (1. / self.accuracy))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2G0du4pKMw5v"},"source":["q_data = pd.read_csv(path_to_prepr_data + \"/prepr_queries.csv\", header = None)\n","descr_data = pd.read_csv(path_to_prepr_data + \"/prepr_descriptions.csv\", header = None,\\\n","                                      sep ='<<', engine = 'python')\n","q_data['descr'] = descr_data[0]\n","q_data['category_id'] = target"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1knNsVW1Qcfe"},"source":["import random\n","\n","real_size = q_data.shape[0]\n","\n","idx = random.randint(0, int(real_size))\n","rand_query = q_data.iloc[[idx]][0]\n","real_cat = class_model.predict(rand_query)[0]\n","\n","arr = np.arange(10)\n","ind_true_cat = np.array(q_data[q_data.category_id == real_cat].head(10).index)\n","indeces = np.append(arr, ind_true_cat)\n","np.random.shuffle(indeces)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NGcIxSxC5-GN"},"source":["ev_heurist(rand_query, q_data.iloc[indeces]) # половина неподходящих запросов"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XCNXy9BUH-cx"},"source":["arr_2 = np.arange(5)                      # треть неподходящих запросов\n","indeces_2 = np.append(arr_2, ind_true_cat)\n","np.random.shuffle(indeces_2)\n","ev_heurist(rand_query, q_data.iloc[indeces_2])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9mg8cdm-V1fG"},"source":["#### smart search"]},{"cell_type":"code","metadata":{"id":"54P0Yb84TUq7"},"source":["from sklearn.externals import joblib\n"," # замени, пож, тем путем, где первоначальная табличка с номерами категорий\n","path_to_category = \"/content/drive/MyDrive/sharing/datasets/avito/raw_data/category.csv\"\n","path_to_class_model =  \"/content/drive/MyDrive/sharing/models/pipeline_class.pkl\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"68ApUuQgIUwF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621288219113,"user_tz":-180,"elapsed":1333,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"9fd3fd4e-6ca4-4a1e-85e5-edb24a38b2f4"},"source":["pd_categorized_data = pd.read_csv(path_to_category)\n","classes = pd_categorized_data.category_id.copy()\n","print(len(classes))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["54\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"n9lzcAq_WUsq"},"source":["# сорри за эти кишки, без этой функции моделька не грузится\n","stop_words = stopwords.words(\"russian\")\n","\n","def tokenize(text):\n","    if isinstance(text, np.ndarray):\n","      # np array\n","      str_text = ''\n","      for s in text:\n","        str_text = str_text + s\n","      text = str_text\n","    \n","\n","    tokens = [token for token in text.split() if token not in stop_words and token != \" \" \\\n","                      and token.strip() not in punctuation]\n","    return tokens\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y7AQQrSYTb8c"},"source":["with open(path_to_class_model,'rb') as g:\n","  class_model = joblib.load(g) # валится без tokenize\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vQPFOqi5Yiff"},"source":["acc = 0.86512297 #пока так, в общем случае этот метод класса"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f1iFQ5Eo2jH5"},"source":["data = pd.read_csv(\"/content/drive/MyDrive/sharing/datasets/avito/raw_data/train.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y8g1SHlL2y_-","executionInfo":{"status":"ok","timestamp":1621276261737,"user_tz":-180,"elapsed":25615,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"4b87d530-701b-4b3f-91d5-b3fc0ad20c73"},"source":["data.iloc[4]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["item_id                                                        4\n","title                                               Ноутбук aser\n","description    Продаётся ноутбук ACER e5-511C2TA. Куплен в ко...\n","price                                                      19000\n","category_id                                                    1\n","Name: 4, dtype: object"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"swOcZiOlULj4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621288256161,"user_tz":-180,"elapsed":6850,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"244147dd-7dff-46f6-f390-4b1b5b09622d"},"source":["def get_class(resp_ind):\n","  return data.iloc[resp_ind].category_id\n","  #return classes.iloc[resp_ind]\n","get_class(0)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["19"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"HKvFyuFgV0lD"},"source":["# принимает запрос текстом и индексы резов\n","def ev_heurist(query, responses):\n","  res_size = responses.shape[0] # количество доков\n","  grades = np.arange(1, res_size + 1)[::-1]\n","  \n","  max_grade = res_size * (res_size + 1) / 2\n","  q_class_pred = class_model.predict(query)\n","  resp_class = get_class(responses) # get class method\n","  #resp_class = class_model.predict(documents[[1]].values[responses])\n","  is_eq = (resp_class == q_class_pred * np.ones(res_size))\n","\n","\n","  score = grades[is_eq].sum() / max_grade #len( sum(grades[is_eq]))\n","  #score = grades[is_eq].sum() / len( grades)\n","  return min(1, score *1 / acc)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3ubKAuJ5Bt4k"},"source":["path_to_prepr_data = \"/content/drive/MyDrive/sharing/datasets/avito/preprocessed_data\"\n","documents = pd.read_csv(path_to_prepr_data +  \"/test_desc_ind.csv\", header=None, index_col=0,  sep=',', engine='python')\n","query = pd.read_csv(path_to_prepr_data +  \"/test_quer_ind.csv\", header=None)\n","query = query.fillna(\"nan\")[[1]].values\n","documents = documents.fillna(\"nan\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8SxmVE9WInd5","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1621288262565,"user_tz":-180,"elapsed":13239,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"eb157a93-fac6-4f77-aa6d-c1c8e6edceca"},"source":["documents.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>продать журнальный столик изготавливать стол п...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>телефон хороший состояние комплект гарантия са...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>теплопелен-лидер теплый толщина утеплитель xx ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>продавать пальто женский букль отличный состоя...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>условно рабочий проблема панель настройка мони...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                   1\n","0                                                   \n","0  продать журнальный столик изготавливать стол п...\n","1  телефон хороший состояние комплект гарантия са...\n","2  теплопелен-лидер теплый толщина утеплитель xx ...\n","3  продавать пальто женский букль отличный состоя...\n","4  условно рабочий проблема панель настройка мони..."]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5VukC5XGC27z","executionInfo":{"status":"ok","timestamp":1621288263322,"user_tz":-180,"elapsed":6722,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"a8d4129b-6be2-4719-d5f9-ade3fa44c64b"},"source":["import _pickle as pickle\n","tfidf = pickle.load(open(\"/content/drive/MyDrive/sharing/models/tfidf.pickle\", \"rb\"))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator TfidfTransformer from version 0.24.1 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator TfidfVectorizer from version 0.24.1 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0P-FJIKBZtp","executionInfo":{"status":"ok","timestamp":1621288673885,"user_tz":-180,"elapsed":787,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"366b5490-c24f-4fa9-f6c8-8cbe19eb62b3"},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import linear_kernel\n","from operator import itemgetter\n","def get_similarities(query, documents_csv, count=30):\n","\n","  indices = documents.index\n","  texts = documents[[1]].values.flatten().tolist()\n"," \n","  query_vec = tfidf.transform(query)\n","  #print('ok')\n","  matrix = tfidf.transform(texts)\n","  cos_similarities = linear_kernel(query_vec, matrix).flatten()\n","  docs_with_ranks = zip(indices, cos_similarities)\n","  sorted_docs = sorted(docs_with_ranks, key=itemgetter(1), reverse=True)[:count]\n","  relevant_indices = [pair[0] for pair in sorted_docs]\n","        # for a,b in sorted_docs:\n","        #      print(texts[a])\n","  return relevant_indices\n","print(query[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['стоик журнальный сталь']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tS9cEN2hXHO9"},"source":["\n","indices = np.array(get_similarities(query[0], documents))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9sM4n7h7NgJ9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621276306245,"user_tz":-180,"elapsed":5095,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"cc5ec333-d637-4a68-d80c-63bac0ac2538"},"source":["get_class(class_model.predict(query[0]))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22    37\n","Name: category_id, dtype: int64"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"gVtqNXsSYIx9"},"source":["print(indices, indices.shape[0])\n","# принимает запрос текстом и индексы резов\n","ev_heurist(query[0], indices)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"879BK0VTLJ-z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621276325380,"user_tz":-180,"elapsed":725,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"9637bd80-8cc4-4877-c9ba-9aca3fa694d4"},"source":["print(class_model.predict(query[0]))\n","res_class = class_model.predict(documents[[1]].values[indices])\n","print(res_class)                  \n","# for i in range(len(indices)):\n","#   print(class_model.predict(documents[[1]].values[indices[i]]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[22]\n","[22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\n"," 22 22 22 22 22 22]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"y_7gnvN0MTSQ"},"source":["import matplotlib.pyplot as plt\n","accuracy = []\n","n_queries = 150\n","for i in range(n_queries):\n","  indices = np.array(get_similarities(query[i], documents))\n","  accuracy.append( ev_heurist(query[i], indices))\n","  dump  = open(\"/content/drive/MyDrive/sharing/models_test/ev_new.csv\", \"a+\")\n","  dump.write(str(accuracy[-1]) + '\\n')\n","  dump.close()\n","\n","plt.figure(figsize=(20,16))\n","plt.scatter(np.arange(n_queries), accuracy)\n","plt.show()\n","plt.savefig(\"/content/drive/MyDrive/sharing/models_test/ev_new.png\")\n","plt.figure(figsize=(20,16))\n","#plt.plot(np.arange(n_queries)[:300], accuracy, color = 'lightgreen')\n","plt.scatter(np.arange(n_queries), accuracy, color = 'black')\n","plt.title('accuracy from number of a query dependence')\n","plt.xlabel('query number')\n","plt.ylabel('accuracy')\n","plt.show()\n","plt.savefig(\"/content/drive/MyDrive/sharing/models_test/ev_new_scatter.png\")\n","accuracy = sorted(accuracy, reverse = True)\n","\n","accuracy_u = np.unique(accuracy)\n","accuracy_u = sorted(accuracy_u, reverse = True)\n","counts = [np.sum(accuracy ==a) for a in accuracy_u]\n","plt.figure(figsize=(20,16))\n","plt.bar(accuracy_u, counts, width = (max(accuracy_u) - min(accuracy_u))/len(accuracy_u), color = 'green', align = 'edge' )\n","plt.show()\n","plt.savefig(\"/content/drive/MyDrive/sharing/models_test/bar_new.png\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eHHjHocPOOyF"},"source":["%matplotlib inline\n","accuracy = pd.read_csv(\"/content/drive/MyDrive/sharing/models_test/ev_new.csv\", header = None)\n","#print(accuracy.mean())\n","#accuracy.mean().to_csv(\"/content/drive/MyDrive/sharing/models_test/mean_acc_1000.csv\", header = None)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8ciEfJGM3h_Q","executionInfo":{"status":"ok","timestamp":1621292856094,"user_tz":-180,"elapsed":812,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"fbdd16ae-1d8d-46d3-b22b-042e2e297a8e"},"source":["\n","np.mean(accuracy)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":965},"id":"NEbW-E4hqkX7","executionInfo":{"status":"ok","timestamp":1621292861433,"user_tz":-180,"elapsed":1061,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"02175052-16bb-49a9-aa7b-9fba69e98d95"},"source":["import matplotlib.pyplot as plt\n","plt.figure(figsize=(20,16))\n","#plt.plot(np.arange(n_queries)[:300], accuracy, color = 'lightgreen')\n","plt.scatter(np.arange(n_queries)[:300], accuracy, color = 'black')\n","plt.title('accuracy from number of a query dependence')\n","plt.xlabel('query number')\n","plt.ylabel('accuracy')\n","plt.show()\n","plt.savefig(\"/content/drive/MyDrive/sharing/models_test/ev_new_scatter.png\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1152 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"7S8TxraOryTv"},"source":["accuracy = sorted(accuracy, reverse = True)\n","\n","accuracy_u = np.unique(accuracy)\n","accuracy_u = sorted(accuracy_u, reverse = True)\n","counts = [np.sum(accuracy ==a) for a in accuracy_u]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mN2iYjfS0--B","executionInfo":{"status":"ok","timestamp":1621290254114,"user_tz":-180,"elapsed":849,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"2aaf3971-0fa2-4149-b6ce-77901de88a58"},"source":["print(len(counts))\n","print(len(accuracy_u))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["93\n","93\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":935},"id":"le31ugxAseYZ","executionInfo":{"status":"ok","timestamp":1621292868308,"user_tz":-180,"elapsed":680,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"3eb9c544-a3a0-4e1e-af1d-26b0cc6d39e8"},"source":["plt.figure(figsize=(20,16))\n","plt.bar(accuracy_u, counts, width = (max(accuracy_u) - min(accuracy_u))/len(accuracy_u), color = 'green', align = 'edge' )\n","plt.show()\n","plt.savefig(\"/content/drive/MyDrive/sharing/models_test/bar_new.png\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x1152 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HZsAeFCU11mO","executionInfo":{"status":"ok","timestamp":1621292873414,"user_tz":-180,"elapsed":901,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"450b4ad7-4f79-445c-f2da-5824b47f76bf"},"source":["accuracy_u = np.array(accuracy_u)\n","accuracy_u[accuracy_u > 1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([], dtype=int64)"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"69_JwFOnY0Vc","executionInfo":{"status":"ok","timestamp":1621290201911,"user_tz":-180,"elapsed":7803,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"cd04a650-2fd2-4f3c-9a42-ce1075489e81"},"source":["accuracy = pd.read_csv(\"/content/drive/MyDrive/sharing/models_test/ev_new.csv\", header = None)\n","\n","accuracy = accuracy.values.tolist()\n","i = np.argmin(accuracy)\n","print(i)\n","inds = get_similarities(query[i], documents)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TXz3s0b-aQIG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621290206396,"user_tz":-180,"elapsed":812,"user":{"displayName":"Ольга Шпунтенко","photoUrl":"","userId":"13907635397026250252"}},"outputId":"17aab6da-796a-4486-fd6b-3a41f94c17af"},"source":["print(\"query = \", query[i], \" accuracy = \", accuracy[i], \"\\n----------\\n\", )\n","print(documents[[1]].values[inds])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["query =  ['новый cort crxxx отличный состояние коробка']  accuracy =  [0.0] \n","----------\n","\n","[['добрый время сутки томич срочно нужный деньги связь это продавать свой родной cort crxxx отличный гитара отличный состояние покупать x месяц назад xx xxx рубль очень серьезно следить состояние хранить родной заводской коробка смело называть новый']\n"," ['коробка отличный состояние']\n"," ['отличный состояние коробка']\n"," ['состояние отличный коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['состояние отличный коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['отличный состояние коробка']\n"," ['новый состояние x коробка']\n"," ['sphero x.x новый коробка']\n"," ['новый коробка']\n"," ['новый коробка']\n"," ['продавать бас гитара cort gb pj отличный состояние играть дом']\n"," ['состояние x коробка']\n"," ['коробка состояние x']\n"," ['отличный состояние новый']\n"," ['новый состояние отличный']\n"," ['отличный новый состояние']\n"," ['состояние отличный новый']\n"," ['отличный состояние новый']\n"," ['новый состояние отличный']\n"," ['б\\\\у отличный состояние новый']\n"," ['отличный состояние новый']\n"," ['отличный состояние новый']\n"," ['новый состояние отличный']]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aj1UX6cYaPVR"},"source":[""],"execution_count":null,"outputs":[]}]}